<?php
/**
 * Copyright 2011-2014, Florian Krämer
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice.
 *
 * Copyright 2011-2014, Florian Krämer
 * @license MIT License (http://www.opensource.org/licenses/mit-license.php)
 */

App::uses('ImagineUtility', 'Imagine.Lib');
App::uses('Imagine', 'Imagine.Lib');

/**
 * CakePHP Imagine Plugin
 *
 * @package Imagine.Model.Behavior
 */
class ImagineBehavior extends ModelBehavior {

/**
 * Default settings array
 *
 * @var Imagine
 */
	public $Imagine;

/**
 * Default settings array
 *
 * @var Imagine\[Engine]\Imagine
 */
	public $ImagineObject;

/**
 * Default settings array
 *
 * @var array
 */
	protected $_defaults = array(
	);

/**
 * Setup
 *
 * @param Model $Model
 * @param array $settings
 * @return void
 */
	public function setup(Model $Model, $settings = array()) {
		$this->settings = $settings + $this->_defaults;

		$this->Imagine = new Imagine($this->settings);
		$this->ImagineObject = $this->Imagine->create();
	}

/**
 * Get the imagine object
 *
 * @param Model $Model
 * @return Imagine object
 */
	public function imagineObject(Model $Model) {
		return $this->ImagineObject;
	}

/**
 * Loads an image and applies operations on it
 *
 * Caching and taking care of the file storage is NOT the purpose of this method!
 *
 * @param Model $Model
 * @param $Image
 * @param null $output
 * @param array $imagineOptions
 * @param array $operations
 * @throws BadMethodCallException
 * @return boolean
 */
	public function processImage(Model $Model, $Image, $output = null, $imagineOptions = array(), $operations = array()) {
		if (is_string($Image)) {
			$Image = $this->Imagine->open($Image);
		}

		foreach ($operations as $operation => $params) {
			if (method_exists($Model, $operation)) {
				$Model->{$operation}($Image, $params);
			} elseif (method_exists($this, $operation)) {
				$this->{$operation}($Model, $Image, $params);
			} else {
				throw new BadMethodCallException(__d('imagine', 'Unsupported image operation %s!', $operation));
			}
		}

		if (is_null($output)) {
			return $Image;
		}

		return $this->Imagine->save($Image, $output, $imagineOptions);
	}

/**
 * Turns the operations and their params into a string that can be used in a file name to cache an image.
 *
 * Suffix your image with the string generated by this method to be able to batch delete a file that has versions of it cached.
 * The intended usage of this is to store the files as my_horse.thumbnail+width-100-height+100.jpg for example.
 *
 * So after upload store your image meta data in a db, give the filename the id of the record and suffix it
 * with this string and store the string also in the db. In the views, if no further control over the image access is needd,
 * you can simply direct linke the image like $this->Html->image('/images/05/04/61/my_horse.thumbnail+width-100-height+100.jpg');
 *
 * @param Model $Model
 * @param array $operations Imagine image operations
 * @param array $separators Optional
 * @param bool $hash
 * @return string Filename compatible String representation of the operations
 * @link http://support.microsoft.com/kb/177506
 */
	public function operationsToString(Model $Model, $operations, $separators = array(), $hash = false) {
		return ImagineUtility::operationsToString($operations, $separators, $hash);
	}

/**
 * hashImageOperations
 *
 * @param array $imageSizes
 * @param integer $hashLenght
 * @return string
 */
	public function hashImageOperations($imageSizes, $hashLenght = 8) {
		return ImagineUtility::hashImageOperations($imageSizes, $hashLenght = 8);
	}

/**
 * Wrapper for Imagines crop
 *
 * @param Model $Model
 * @param $Image
 * @param array Array of options for processing the image
 * @throws InvalidArgumentException
 * @return void
 */
	public function crop(Model $Model, $Image, $options = array()) {
		$this->Imagine->crop($Image, $options);
	}

/**
 * Crops an image based on its widht or height, crops it to a square and resizes it to the given size
 *
 * @param Model $Model
 * @param $Image
 * @param array Array of options for processing the image
 * @throws InvalidArgumentException
 * @return void
 */
	public function squareCenterCrop(Model $Model, $Image, $options = array()) {
		$this->Imagine->squareCenterCrop($Image, $options);
	}

/**
 * Widen
 *
 * @param Model $Model
 * @param $Image
 * @param array $options
 * @throws InvalidArgumentException
 * @return void
 */
	public function widen(Model $Model, $Image, $options = array()) {
		$this->Imagine->widen($Image, $options);
	}

/**
 * Heighten
 *
 * @param Model $Model
 * @param $Image
 * @param array $options
 * @throws InvalidArgumentException
 * @return void
 */
	public function heighten(Model $Model, $Image, $options = array()) {
		$this->Imagine->heighten($Image, $options);
	}

/**
 * WidenAndHeighten
 *
 * @param Model $Model
 * @param $Image
 * @param array $options
 * @throws InvalidArgumentException
 * @return void
 */
	public function widenAndHeighten(Model $Model, $Image, $options = array()) {
		$this->Imagine->widenAndHeighten($Image, $options);
	}

/**
 * Heighten
 *
 * @param Model $Model
 * @param $Image
 * @param array $options
 * @throws InvalidArgumentException
 * @return void
 */
	public function scale(Model $Model, $Image, $options = array()) {
		$this->Imagine->scale($Image, $options);
	}

/**
 * Wrapper for Imagine flipHorizontally and flipVertically
 *
 * @param Model $Model
 * @param $Image
 * @param array Array of options for processing the image
 * @throws InvalidArgumentException
 * @return void
 */
	public function flip(Model $Model, $Image, $options = array()) {
		$this->Imagine->flip($Image, $options);
	}

/**
 * Wrapper for rotate
 *
 * @param Model Model
 * @param object Imagine Image Object
 * @param array Array of options for processing the image
 * @return void
 */
	public function rotate(Model $Model, $Image, $options = array()) {
		$this->Imagine->rotate($Image, $options);
	}

/**
 * Wrapper for Imagines thumbnail
 *
 * @param Model Model
 * @param object Imagine Image Object
 * @param array Array of options for processing the image
 * @return void
 */
	public function thumbnail(Model $Model, &$Image, $options = array()) {
		$this->Imagine->thumbnail($Image, $options);
	}

/**
 * Wrapper for Imagines resize
 *
 * @param Model Model
 * @param object Imagine Image Object
 * @param array Array of options for processing the image
 * @return void
 */
	public function resize(Model $Model, $Image, $options = array()) {
		$this->Imagine->resize($Image, $options);
	}

/**
 * Gets the size of an image
 *
 * @param Model Model
 * @param mixed Imagine Image object or string of a file name
 * @return array first value is width, second height
 * @see Imagine\Image\ImageInterface::getSize()
 */
	public function getImageSize(Model $Model, $Image) {
		return $this->Imagine->getImageSize($Image);
	}

}
<?php
/**
 * Copyright 2011-2014, Florian Krämer
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice.
 *
 * Copyright 2011-2014, Florian Krämer
 * @license MIT License (http://www.opensource.org/licenses/mit-license.php)
 */
namespace Burzum\Imagine\Model\Behavior;

use Cake\ORM\Behavior;
use Cake\ORM\Table;
use Burzum\Imagine\Lib\ImagineUtility;
use Burzum\Imagine\Lib\ImageProcessor;

/**
 * Imagine Image processing Behavior
 *
 * @deprecated Use the Burzum\Imagine\Lib\ImageProcessor class directly.
 */
class ImagineBehavior extends Behavior {

/**
 * Default settings array
 *
 * @var array
 */
	protected $_defaultConfig = array(
		'engine' => 'Gd'
	);

/**
 * Keeping a reference to the table in order to,
 * be able to retrieve associations and fetch records for counting.
 *
 * @var array
 */
	protected $_table;

/**
 * Constructor
 *
 * @param Table $table The table this behavior is attached to.
 * @param array $settings The settings for this behavior.
 */
	public function __construct(Table $table, array $config = []) {
		parent::__construct($table, $config);
		$this->_table = $table;
		$this->_processor = new ImageProcessor($this->config());
	}

/**
 * Get the imagine object
 *
 * @return Imagine object
 */
	public function imagineObject() {
		return $this->_processor->imagine();
	}

/**
 * Loads an image and applies operations on it
 *
 * Caching and taking care of the file storage is NOT the purpose of this method!
 *
 * @param $ImageObject
 * @param null $output
 * @param array $imagineOptions
 * @param array $operations
 * @throws \BadMethodCallException
 * @return boolean
 */
	public function processImage($ImageObject, $output = null, $imagineOptions = array(), $operations = array()) {
		$this->_processor->open($ImageObject);
		return $this->_processor->processImage($output, $imagineOptions, $operations);
	}

/**
 * Turns the operations and their params into a string that can be used in a file name to cache an image.
 *
 * Suffix your image with the string generated by this method to be able to batch delete a file that has versions of it cached.
 * The intended usage of this is to store the files as my_horse.thumbnail+width-100-height+100.jpg for example.
 *
 * So after upload store your image meta data in a db, give the filename the id of the record and suffix it
 * with this string and store the string also in the db. In the views, if no further control over the image access is needd,
 * you can simply direct linke the image like $this->Html->image('/images/05/04/61/my_horse.thumbnail+width-100-height+100.jpg');
 *
 * @deprecated Use ImagineUtility::operationsToString()
 * @param array $operations Imagine image operations
 * @param array $separators Optional
 * @param bool $hash
 * @return string Filename compatible String representation of the operations
 * @link http://support.microsoft.com/kb/177506
 */
	public function operationsToString($operations, $separators = array(), $hash = false) {
		return ImagineUtility::operationsToString($operations, $separators, $hash);
	}

/**
 * hashImageOperations
 *
 * @deprecated Use ImagineUtility::hashImageOperations.
 * @param array $imageSizes
 * @param int $hashLenght
 * @return string
 */
	public function hashImageOperations($imageSizes, $hashLenght = 8) {
		return ImagineUtility::hashImageOperations($imageSizes, $hashLenght);
	}

/**
 * Wrapper for Imagines crop
 *
 * @param $Image
 * @param array Array of options for processing the image
 * @throws \InvalidArgumentException
 * @return void
 */
	public function crop($Image, $options = []) {
		$this->_processor->crop($options);
	}

/**
 * Crops an image based on its widht or height, crops it to a square and resizes it to the given size
 *
 * @param $Image
 * @param array Array of options for processing the image
 * @throws \InvalidArgumentException
 * @return void
 */
	public function squareCenterCrop($Image, $options = []) {
		$this->_processor->squareCenterCrop($options);
	}

/**
 * Widen
 *
 * @param $Image
 * @param array $options
 * @throws \InvalidArgumentException
 * @return void
 */
	public function widen($Image, $options = []) {
		$this->_processor->widen($options);
	}

/**
 * Heighten
 *
 * @param $Image
 * @param array $options
 * @throws \InvalidArgumentException
 * @return void
 */
	public function heighten($Image, array $options = []) {
		$this->_processor->heighten($options);
	}

/**
 * WidenAndHeighten
 *
 * @param $Image
 * @param array $options
 * @throws \InvalidArgumentException
 * @return void
 */
	public function widenAndHeighten($Image, array $options = []) {
		$this->_processor->widenAndHeighten($options);
	}

/**
 * Heighten
 *
 * @param $Image
 * @param array $options
 * @throws \InvalidArgumentException
 * @return void
 */
	public function scale($Image, $options = []) {
		$this->_processor->scale($options);
	}

/**
 * Wrapper for Imagine flipHorizontally and flipVertically
 *
 * @param $Image
 * @param array Array of options for processing the image
 * @throws \InvalidArgumentException
 * @return void
 */
	public function flip($Image, $options = []) {
		$this->_processor->flip($options);
	}

/**
 * Wrapper for rotate
 *
 * @param object Imagine Image Object
 * @param array Array of options for processing the image
 */
	public function rotate($Image, array $options = []) {
		$this->_processor->rotate($options['degree']);
	}

/**
 * Wrapper for Imagines thumbnail
 *
 * @throws \InvalidArgumentException
 * @param Imagine Image Object
 * @param array Array of options for processing the image
 * @throws InvalidArgumentException if no height or width was passed
 * @return void
 */
	public function thumbnail(&$Image, array $options = []) {
		$this->_processor->thumbnail($options);
	}

/**
 * Wrapper for Imagines resize
 *
 * @param $Image
 * @param array Array of options for processing the image
 * @throws \InvalidArgumentException
 * @internal param \Imagine\Imagine $Imagine Image Object
 */
	public function resize($Image, array $options = []) {
		$this->_processor->resize($options);
	}

/**
 * Gets the size of an image
 *
 * @param mixed Imagine Image object or string of a file name
 * @return array first value is width, second height
 * @see Imagine\Image\ImageInterface::getSize()
 */
	public function getImageSize($Image) {
		return $this->_processor->getImageSize($Image);
	}

}